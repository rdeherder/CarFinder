@page "/cars"
@inject ICarService carService
@inject NavigationManager navMan
@inject IJSRuntime jsRuntime

@if (_task.IsCompleted)
{
    <GridComponent T="CarModel" Grid="@_grid" OnRowClickedActions="@_rowClickActions"></GridComponent>
}
else
{
    <p>
        <em>Cars are being loaded, one moment please...</em>
        <br />
        <br />
        <button @onclick="CancelGetCars">Cancel</button>
    </p>
}

@code
{
    private CGrid<CarModel> _grid;
    private Task _task;
    private List<Action<object>> _rowClickActions;
    private CancellationTokenSource _cancellationTokenSource;

    protected override async Task OnParametersSetAsync()
    {
        _rowClickActions = new List<Action<object>>();
        _rowClickActions.Add(ShowDetail);

        Action<IGridColumnCollection<CarModel>> columns = c =>
        {
            c.Add(o => o.Id);
            c.Add(o => o.Make);
            c.Add(o => o.Model);
            c.Add(o => o.Year);
            c.Add(o => o.HP);
            c.Add(o => o.Price);
        };

        var query = new QueryDictionary<StringValues>();
        query.Add("grid-page", "2");

        _cancellationTokenSource = new();
        var client = new GridClient<CarModel>(q => carService.GetCarsGridRowsAsync(columns, 
                                                                                   q, 
                                                                                   _cancellationTokenSource.Token),
                                              query,
                                              false,
                                              "carsGrid",
                                              columns)
                                              .ChangePageSize(enable: true)
                                              .Filterable()
                                              .Searchable()
                                              .Selectable(enable: true)
                                              .Sortable()
                                              .WithMultipleFilters();

        _grid = client.Grid;

        _task = client.UpdateGrid();
        await _task;
    }

    public void CancelGetCars()
    {
        _cancellationTokenSource.Cancel();
    }

    private void ShowDetail(object item)
    {
        if (item.GetType() == typeof(CarModel))
        {
            jsRuntime.InvokeAsync<object>("open", $"/car/{((CarModel)item).Id}", "_blank");
            //navMan.NavigateTo($"/car/{((CarModel)item).Id}");
        }
    }
}