@page "/register"
@inject IUserEndpoint userEndpoint
@inject IAuthenticationService authService
@inject NavigationManager navManager

<h3>Create an account</h3>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="alert alert-danger" role="alert">
        <p>@errorMessage</p>
    </div>
}

<EditForm Model="@_model" OnValidSubmit="@OnValidSubmitAsync">
    <DataAnnotationsValidator />

    <div class="form-group row">
        <label for="first-name" class="col-md-2 col-form-label">First name:</label>
        <div class="col-md-10">
            <InputText id="first-name" class="form-control" @bind-Value="@_model.FirstName" />
            <ValidationMessage For="@(() => _model.FirstName)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="last-name" class="col-md-2 col-form-label">Last name:</label>
        <div class="col-md-10">
            <InputText id="last-name" class="form-control" @bind-Value="@_model.LastName" />
            <ValidationMessage For="@(() => _model.LastName)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="email" class="col-md-2 col-form-label">Email address:</label>
        <div class="col-md-10">
            <InputText id="email" class="form-control" @bind-Value="@_model.EmailAddress" />
            <ValidationMessage For="@(() => _model.EmailAddress)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-10">
            <InputText id="password" type="password" class="form-control" @bind-Value="@_model.Password" />
            <ValidationMessage For="@(() => _model.Password)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="confirm" class="col-md-2 col-form-label">Confirm password:</label>
        <div class="col-md-10">
            <InputText id="confirm" type="password" class="form-control" @bind-Value="@_model.ConfirmPassword" />
            <ValidationMessage For="@(() => _model.ConfirmPassword)" />
        </div>
    </div>

    <div id="percent-loaded" role="progressbar" aria-valuenow="75"
         aria-valuemin="0" aria-valuemax="100">
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Create account</button>
        </div>
    </div>
</EditForm>

@code {
    CreateUserModel _model = new();
    string errorMessage;

    private async Task OnValidSubmitAsync()
    {
        errorMessage = string.Empty;

        try
        {
            await userEndpoint.CreateUserAsync(_model);

            // Wanneer de gebruiker is gemaakt, deze meteen inloggen:
            AuthenticatedUserModel result = await authService.LoginAsync(new()
            {
                Email = _model.EmailAddress,
                Password = _model.Password
            });

            if (result is not null)
            {
                navManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Registratie gelukt maar fout bij het inloggen.";    // Zou nooit moeten gebeuren, maar just in case.
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
